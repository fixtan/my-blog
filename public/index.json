[{"content":"\rAIアニメーションのデモ 以下はFramePack-eichiで生成したMP4動画のデモです。\nお使いのブラウザは動画の再生に対応していません。\r","summary":"FramePackでAIアニメーションを作成する方法の紹介、及び、画像生成AIの活用方法","title":"FramePackによるAIアニメーション","url":"/featured/project1/"},{"content":"","summary":"","title":"FramePackによるAIアニメーション","url":"/featured/project2/"},{"content":"","summary":"","title":"FramePackによるAIアニメーション","url":"/featured/project3/"},{"content":"","summary":"","title":"FramePackによるAIアニメーション","url":"/featured/project4/"},{"content":"","summary":"","title":"FramePackによるAIアニメーション","url":"/featured/project5/"},{"content":"\rはじめに GitHUBでWebMSXが公開されてるのを見て、自前のWEBサイトでWebMSXをカスタムし動かせないか？と思い立ち、実践してみた備忘録的メモです。\n昔は、BlueMSXとかParaMSXなど、Windowsアプリとしてダウンロードしローカルで遊んでた時期がありましたが、今は、WEB上でかなりの完成度で動いてしまうのは、時代の流れを感じますね…。\nWebMSX公式サイト\nhttps://webmsx.org/\nWebMSX(GitHUB)\nhttps://github.com/ppeccin/WebMSX/\nこのサイトは、ChatGPTと協力して制作しており、今回も記事もAIの力を借りて行っています。\n将来的にMSX時代からPC-98、X68000、Winodwsまでの時代の変化を再現できるようなapplicationだったり、WEBサービスを作れないかと考えています。 手っ取り早く動かす方法 少しズルいですが、iframeを使えば、簡単に実現できます。\n\u0026lt;iframe src=\u0026#34;https://webmsx.org/\u0026#34; width=\u0026#34;640\u0026#34; height=\u0026#34;480\u0026#34; frameborder=\u0026#34;0\u0026#34; allowfullscreen \u0026gt;\u0026lt;/iframe\u0026gt; ROMを読み込んで起動する事も可能です。\n\u0026lt;iframe src=\u0026#34;https://webmsx.org/?ROM=https://yourdomain.com/roms/game.rom\u0026#34; width=\u0026#34;640\u0026#34; height=\u0026#34;480\u0026#34; frameborder=\u0026#34;0\u0026#34; allowfullscreen \u0026gt;\u0026lt;/iframe\u0026gt; 🧩目標:WebMSXを最小構成でホストする 構成ファイル（スターターセット）\n以下のファイルで構成します：\nwebmsx-netlify/\n├─ index.html ← WebMSX本体を読み込むページ\n├─ roms/\n│ └── game.rom ← 任意のROMファイル（自分で追加）\n├─ assets/\n│ └── webmsx/　← WebMSX本体（js/cssなど）\n├─ netlify.toml　← Netlify設定ファイル（optional）\n└─ README.md\n🔨 スターター準備手順 ① リポジトリ作成 GitHub上で空のリポジトリを作成（例：webmsx-netlify）\n② コマンドでローカルセットアップ（手動でも可） git clone https://github.com/ppeccin/WebMSX.git\rcd WebMSX\r# public向けに最低限のファイルをコピー\rmkdir ../webmsx-netlify\rcp index.html ../webmsx-netlify/\rcp -r src ../webmsx-netlify/assets/webmsx\r# ROMフォルダ作成\rmkdir ../webmsx-netlify/roms\r# game.rom を入れる（任意） ③ index.html の編集 \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt;\r\u0026lt;title\u0026gt;WebMSX Starter\u0026lt;/title\u0026gt;\r\u0026lt;script src=\u0026#34;assets/webmsx/webmsx.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\r\u0026lt;style\u0026gt;body { margin: 0; }\u0026lt;/style\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;script\u0026gt;\rWebMSX.run({\r\u0026#39;rom\u0026#39;: \u0026#39;roms/game.rom\u0026#39;\r});\r\u0026lt;/script\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt; ④ netlify.toml 例（ルートを指定したい場合） [build]\rpublish = \u0026#34;.\u0026#34; 🚀 デプロイ 作成した webmsx-netlify を GitHub に push\nアップロードされたROMを読み込んで遊べるようになります。\n問題発生 と、ここまでは、AIの指示通りにやったのですが、この方法だとwebmsx.jsが見つからない為、起動する事が出来ないように見えました。\n改めて、git cloneしたフォルダ内を確認すると、\n\\WebMSX\\release\\stable\\6.0\\embedded\nフォルダ内に、\n・wmsx.js\n・index.html\nというファイルがあり、これをブラウザで実行するとMSXエミュレーターが起動するようです。\n改めて整理 wmsx.jsがコアファイルのようなので、これを使う事にします。\nディレクトリ内で配置する場所についてですが、今まで、ダウンロードした、jsファイルは、\n/(blog name)/static/js/\nに全て配置しています。（検索用に使う lunr.min.js など）\nなので、ここにしてはどうかAIに聞くと 管理の一貫性 的に考えてもベターなので、ここへ配置します。\nそうすると、\n\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;headlang=\u0026#34;en\u0026#34;\u0026gt;\r...\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;div id=\u0026#34;wmsx\u0026#34; style=\u0026#34;text-align: center; margin: 20px auto 0;\u0026#34;\u0026gt;\r\u0026lt;div id=\u0026#34;wmsx-screen\u0026#34; style=\u0026#34;box-shadow: 2px 2px 10px rgba(0, 0, 0, .7);\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;script src=\u0026#34;/js/wmsx.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt; で動くようになると思います。\n完成 以下のURLにアクセスするとwebmsxが起動します。\nhttps://humanxai.info/webmsx/\nブログに埋め込むことも可能で、\n\u0026lt;iframe\rsrc=\u0026#34;/webmsx/index.html\u0026#34;\rwidth=\u0026#34;640\u0026#34;\rheight=\u0026#34;480\u0026#34;\rstyle=\u0026#34;border: none; box-shadow: 2px 2px 10px rgba(0,0,0,0.5); margin: auto; display: block;\u0026#34;\u0026gt;\r\u0026lt;/iframe\u0026gt; とやれば以下のような感じで起動します。\nただ、ブログ記事内に以下のように書く場合、スクリプトコードが安全の為、無効化されるので無理なようです。\n\u0026lt;div id=\u0026#34;wmsx\u0026#34; style=\u0026#34;text-align: center; margin: 20px auto 0;\u0026#34;\u0026gt;\r\u0026lt;div id=\u0026#34;wmsx-screen\u0026#34; style=\u0026#34;box-shadow: 2px 2px 10px rgba(0,0,0,0.5);\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\r\u0026lt;/div\u0026gt;\r\u0026lt;script src=\u0026#34;/js/wmsx.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; iframe ラッパーを Hugo の shortcode にする（埋め込み簡略化） layouts/shortcodes/msx.html に以下のように記述：\n\u0026lt;iframe\rsrc=\u0026#34;/webmsx/index.html?ROM=/roms/{{ .Get \u0026#34;rom\u0026#34; }}\u0026#34;\rwidth=\u0026#34;640\u0026#34;\rheight=\u0026#34;480\u0026#34;\rstyle=\u0026#34;border:none; box-shadow: 2px 2px 10px rgba(0,0,0,0.5); margin: auto;\u0026#34;\u0026gt;\r\u0026lt;/iframe\u0026gt; 以後\n{ {\u0026lt; msx rom=\u0026#34;MSXdev23_PentacornQuest_v1.1.rom\u0026#34; \u0026gt; } } で上記のHTMLファイルを読み込めるようになります。\n📁 WebMSXの読み込み形式について（参考） ?ROM=filename.rom → ROMイメージ（カセット）\n?DISK=filename.dsk → ディスクイメージ\n?TAPE=filename.cas → テープ（カセット）イメージ\nWebMSXコードを貼り付ける方法 自作や公開されているBASICコードを、WebMSXで動かしたい場合。\n[Alt] + V\nでペーストモードになるので、その際に、\n[Ctrl] + V\nで貼り付けできます。\n余談：著作権フリーのMSX向けROM・DISK素材 🕹 1. 【MSXdev】公式コンテスト作品 MSXdev（https://msxdev.org） は、毎年行われるMSXゲーム開発コンテストです。\n多くの作品は 無料でROM形式で公開 されており、合法的にWebMSXなどで遊べます。\n🎮 おすすめ作品例（全てフリー） \u0026ldquo;The Menace from Triton\u0026rdquo;\n横スクロールのシューティング（2018年 MSXdev） \u0026ldquo;Lilly\u0026rsquo;s Saga\u0026rdquo;\nドットアートが美しいアクションRPG（2021年） \u0026ldquo;Wing Warriors\u0026rdquo;\n2人対戦シューティング（2015年） 🔗 ダウンロードページ https://msxdev.org/msxdev23/ https://msxdev.org/download/ 🗂 2. 【MSX Resource Center（MRC）】 https://www.msx.org/\n古くからあるコミュニティ。\nHomebrew（自作ソフト）作品多数あり、合法的に再配布可能なものが多いです。\n検索で \u0026ldquo;ROM\u0026rdquo;, \u0026ldquo;BAS\u0026rdquo;, \u0026ldquo;Homebrew\u0026rdquo; などを入れて探すと見つかります。\n","summary":"WebMSXを活用しWEBサイトでMSXを動作させる方法の紹介","title":"自前でMSXサイトを作成（WebMSX）","url":"/posts/webmsx-hugo-netlify/"},{"content":"\rはじめに Netlifyで、静的ジェネレーター、Hugoを使いブログ作成をはじめ、形になってきたので、ドメインを取得してみました。\nドメイン取得には、以前契約したムームードメインを使いましたが、契約時にレンタルサーバーの契約が６か月発生するので、ご注意ください。 ドメインだけ取得したい場合は別のサイトを検討された方が良いかもしれません。\nドメインを取得 ムームードメインで取得する場合は、以下のURLで希望ドメインを入力して検索。\nhttps://muumuu-domain.com/domain/search?domain[]\n※以後、humanxai.infoを取得した前提で進めていきます。\nNetlify側で独自ドメインを設定 Netlify のダッシュボードにアクセス\n対象のサイト（steady-malasada-〜〜）を選択\n左メニュー → Domain settings → Add custom domain\nhumanxai.info を入力し「Verify」→「Add domain」\nAdd a domain you already ownを選択\nVerifyをクリック。\nAdd domainをクリック\nここまで来たらドメイン管理画面の方で設定。\nCNAME を設定する ムームードメインにログイン\n左メニューから「ムームーDNS」→「ムームーDNS設定変更」\n対象ドメイン を選ぶ\n表の一番下にある「カスタム設定」→「カスタム設定２」→「設定を追加する」\nサブドメイン、種別「CNAME」、内容を入力して、設定を追加。\n※設定反映には１時間以上、最大２日ぐらいかかる場合があります。\nnetlifyの設定画面に戻り、Verift DNS　configration をクリックして反映されれば成功です。\n上の画像が下の様になれば成功。\nDNS checker 序にDNS checkerサイトでドメインを確認しておくと安心。\nhttps://dnschecker.org/#A/humanxai.info\nドメインにアクセスすると警告（SSL証明書） 一連の設定が完了するとドメインでWEBにアクセスできるようになりますが、初期段階では以下のような警告画面が出る場合があります。\n🔐 警告の理由：「SSL証明書の発行プロセスがまだ完全に完了していない」 Netlify の「SSL/TLS certificate」セクションに：\n✅ DNS verification was successful\n🚫 でも証明書がまだ provision（発行）されていない\nという状態なので、https 通信が有効化される前段階です。\n✅ 解決方法 SSL証明書の発行には数分～最大24時間ほどかかる場合がありますので暫く待つ必要があります。\nちなみにうちの場合は１時間ぐらいで警告が消え表示されるようになりました。\nドメインにアクセスできなくなる 暫くするとドメインにアクセスできなくなる不都合が出た為、netlify側でDNSの設定をするように変更。\nドメインマネージメントの画面から、\noptionss -\u0026gt; Set up Netlify DNS\nを選択。画像では、www.humanxai.info になってますが、正確には、.humanxai.info の方。\nUpdate your domain\u0026rsquo;s name servers まで進めたらネームサーバリストをメモ。\nムームードメインの「ネームサーバ設定変更」を選択し「GMOペパポ以外のネームサーバを使用する」を選択するとネームサーバ入力欄が出るので、先程メモしたネームサーバを設定。\n設定保存したら、Netlifyのドメイン設定画面に戻りRetry DNS verification をクリック。\n設定反映されるまで最小で１時間、最大で２日ぐらいかかるようなので、更新完了するまで暫く待ちます。\n以上、ドメイン取得からnetlifyでのドメイン設定や、ドメインサイトでのCNAME設定など、一連の流れを紹介しました。\nご参考になれば幸いです。\n","summary":"netlifyでのドメイン設定方法の紹介","title":"netlifyでのドメイン設定方法","url":"/posts/%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3%E5%8F%96%E5%BE%97humanxai-info%E3%81%A8netlify%E3%81%A7%E3%81%AE%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3%E8%A8%AD%E5%AE%9A%E6%96%B9%E6%B3%95-1/"},{"content":"\r朝、PCを起動したらメインモニターが真っ暗…。\n現在のグラフィックボードからモニタへの接続は、やや特殊で、ASRockのThunderbolt4 AICカードに、DisplayPortでGPUとケーブル接続し、Thunderbolt4 AICカード側はノーブランド（中華製）の「USB-C -\u0026gt; HDMI 変換 2 ポート」を繋ぎ、HDMIケーブルでモニタに繋ぐというややこしいつなぎ方をしてます。\nつまり\nRTX4070Ti → Thunderbolt AIC → USB-C → HDMI変換 → モニタ（L887）\nという構成でしたが、突然映らなくなりました。\n当初は、Thunderboltカードの故障を疑いましたが、デバイスマネージャーやThunderboltコントロールセンター上では正常に動作しているように見え、異常は確認できませんでした。\nMicrosoft Thunderbolt™ コントロール・センター 公式\nhttps://apps.microsoft.com/detail/9n6f0jv38ph1?hl=ja-JP\u0026amp;gl=JP\nここで、故障原因として考えられるのは・・\n原因①：BIOS設定 Thunderboltサポートが有効になっているか？ （ASRockマザーの場合、TBT設定がBIOSにあり）\nSecurity Levelが「No Security」や「User Authorization」以外になっていないか\n「認証待ち」状態で止まっていると、表示されないことがあります\n原因②：Thunderboltコントロールセンター 「Thunderbolt コントロールセンター」アプリ インストールの有無と、「接続されたデバイス」や「Thunderboltポート」が表示されるか確認\n※Microsoft Storeからインストール可能\n原因③：ケーブル・接続不良 Thunderbolt 4 AICカードはマザーボードのTBTヘッダーと必ず接続する必要があり接続に問題がないかどうか。（チェック済み）\n⚠ これが接続されていないと Thunderbolt コントローラーが無効化される\n原因④：DisplayPortの接触 基礎的な事としてグラボ（RTX 4070Ti）→ Thunderbolt AICカードへの DisplayPort INケーブルはきちんと接続されているか？（チェック済み）\nこれが未接続、もしくは接触不良だと映像信号がカードに届かず映像出力できません。\n■とりあえず、BIOSの項目をチェック・・・\nカードの接触不良を確認する前に、とりあえず、BIOS設定の「Thunderbolt Support」が有効になっているかを確認。\nオンラインマニュアル（PDF）\nhttps://download.asrock.com/Manual/Z690%20Steel%20Legend.pdf\nマニュアルの７９ページにBIOSの「Advanced」に関する項目がありますが、ここで\n4.6.4 Intel(R) Thunderbolt（８６ページ）\nにカードの有効化にする項目があるので、これが無効になってる場合「有効化」。\nここを確認したところ、無効化されていたので、有効化する事で復活しました。\n■ 何故、無効化されたのか？ 思い返せば、昨晩、電源ボックスのスイッチを切り電源を完全に落として一晩放置していたので、それが原因だったようです。\n■ しかし、また再発・・・ 復旧して喜んだのも束の間、USB-Cアダプターに２つ目のHDMIを接続すると、モニタを認識しなくなるトラブルが再発。\n液晶タブレットなど別の機器に接続すると何故か復活し、元のモニタ（L８８７）を接続すると完全に復旧し、再起動後も症状が出なくなりました。\n■ 本当の原因は「EDID」？ EDIDはPCやGPUが接続されたモニタの仕様（解像度、リフレッシュレート、音声出力の有無など）を読み取るために使われており、電源を切ったことでキャッシュデータがリセットされた事で、映像信号の読み取りが上手くできなくなり、今回のような症状が出たと思われます。\n※EDID読み込み失敗（信号が不安 or キャッシュが壊れる）\n⚠️ よくあるEDIDトラブルの例 モニタが映らない・一瞬ついて消える：\nEDID読み込み失敗（信号が不安定、キャッシュが壊れている）\n間違った解像度で表示される：\n古いモニタや中華アダプタが誤情報を送っている\n別のモニタに変えても挙動がおかしい：\nOS側にEDIDがキャッシュされている（Windowsが引きずってる）\n■ EDID保持装置を使うと問題が解消されやすい 今回のような変換ケーブル、Thunderbolt4、USB-C経由によるHDMI変換から、DVIへの変換と、多重な映像変換をする事で、EDIDが不安定になったのが主な要因だと思われます。\n今まで正常に動いていたのは、大元の電源を落とさず、マザーボード側に電源が供給されておりEDIDのキャッシュデータが保持されていて、そのデータをもとにモニタ側と通信できていたためだと思います。\n今回のように電源を完全に切ってEDIDのキャッシュが削除されると再度EDIDと\nCONNECTPRO 3D対応HDMI EDID信号保持機 TMDS-EDID https://www.amazon.co.jp/dp/B00HX3DK18\n★ まとめ グラフィックボードとモニターの接続は、可能な限り変換アダプタを使わず、 シンプルな構成にすることで、EDIDに起因する問題を回避できます。\n今回のように特殊な接続が必要な場合は、 EDIDキャッシュ保持装置の導入が有効です。\nまた、Thunderbolt AICを利用する構成では、BIOS設定が予期せず変更されている可能性もあるため、 起動トラブル時はまずBIOS設定を確認することが有効です。\n","summary":"モニタに映像出力されなくなった問題について、Thunderbolt4 、EDID問題を踏まえトラブル情報をまとめてみました","title":"[自作PC] Thunderbolt AIC モニタが映らない トラブル＆解決方法","url":"/posts/computer-trouble-thunderbolt4/"},{"content":"\rはじめに Decap CMSで記事を作成する際、デフォルトだと記事タイトルの日本語がそのままスラッグ（URL）に使われているために、URLがエンコードされて長くなってしまっています。 （例：%E4%BB%A5%E5%A4%96%E3%81%AE\u0026hellip; のような部分）。\nこれを防ぎ短くわかりやすいURLに変更する方法の紹介です。\n✅ URLを短くする方法（Decap CMS＋Hugo） slug フィールドを使って URL を手動指定すると解決できます。\nDecap CMS の記事作成画面に slug を追加して、任意の短いURL（英数字）を指定できます。\n例: config.yml の collections に以下を追加\nfields:\r- { label: \u0026#34;タイトル\u0026#34;, name: \u0026#34;title\u0026#34;, widget: \u0026#34;string\u0026#34; }\r- { label: \u0026#34;スラッグ\u0026#34;, name: \u0026#34;slug\u0026#34;, widget: \u0026#34;string\u0026#34;, required: false } 変更後、git push -\u0026gt; netlifyでデプロイすると、下の画像のようにDecap CMS画面にスラッグの項目が出現します。\nそして slug を \u0026ldquo;DecapCMS-custom-slug\u0026rdquo; のように英語で入力すれば：\nhttps://humanxai.info/posts/DecapCMS-custom-slug/\nのような 短くてシンプルなURL にできます。\n","summary":"デフォルトで記事タイトルがURLになり長くなってしまう為、短くする方法の紹介","title":"[Decap CMS] URLを短くする方法（Decap CMS＋Hugo）","url":"/posts/decapcms-custom-slug/"},{"content":"\rはじめに Hugo + GitHub + Netlify + Decap CMSという特殊な環境でブログを作成し、記事を書いてるのですが、最初は凄く戸惑いましたが、今となってはかなり慣れてきてgitコマンドも普通に叩き、Netlify の英語だらけのメッセージも毎日見てるので慣れてきて、デプロイチェックとか、独自ドメインを設定するまでに至ってます。\nMarkDownの記述にも慣れてきたので、過去にZennで書いた記事を此方へ移植しようかなとも思ってます。\n前置きは置いておいて、Decap CMSは、デフォルトではcontent/posts 以外のディレクトリに配置されたブログ記事を編集できない仕様になってますが、AIに聞いたところconfig.ymlを編集する事で、別のフォルダの記事を編集可能になるようです。\nネット上にNetlify + Decap CMSに関する情報が殆どないのもあり、今回も記事ネタとして作業工程を紹介したいと思います。\nもし参考にあれば幸いです。\ncontent/(Hogeh) の記事を CMS から編集したい タイトル通り、content/posts以外の場所にある記事をDecap CMSから編集する方法です。\nここでは、「 content/featured 」というディレクトリにある記事を編集する前提で進めていきます。\nまず、Decap CMSの設定ファイルである、config.ymlをVScodeなどのエディタで開きます。\n大体ローカル内では以下のようなパスになってると思います。\n\\my-blog\\static\\admin\\config.yml\nconfig.yml の collectionsセクションを探します。 大体、デフォルト設定だと最後の方にあると思います。\n[...]\rcollections:\r- name: \u0026#34;post\u0026#34;\rlabel: \u0026#34;記事\u0026#34;\rfolder: \u0026#34;content/posts\u0026#34;\rcreate: true\rslug: \u0026#34;{{slug}}\u0026#34;\rfields:\r- { label: \u0026#34;タイトル\u0026#34;, name: \u0026#34;title\u0026#34;, widget: \u0026#34;string\u0026#34; }\r- { label: \u0026#34;日付\u0026#34;, name: \u0026#34;date\u0026#34;, widget: \u0026#34;datetime\u0026#34; }\r- { label: \u0026#34;下書き\u0026#34;, name: \u0026#34;draft\u0026#34;, widget: \u0026#34;boolean\u0026#34;, default: false }\r- { label: \u0026#34;著者\u0026#34;, name: \u0026#34;author\u0026#34;, widget: \u0026#34;string\u0026#34;, default: \u0026#34;lain\u0026#34; }\r- { label: \u0026#34;画像\u0026#34;, name: \u0026#34;image\u0026#34;, widget: \u0026#34;image\u0026#34; }\r- { label: \u0026#34;概要\u0026#34;, name: \u0026#34;summary\u0026#34;, widget: \u0026#34;text\u0026#34;, required: false }\r- { label: \u0026#34;本文\u0026#34;, name: \u0026#34;body\u0026#34;, widget: \u0026#34;markdown\u0026#34; } - { label: \u0026#34;カテゴリ\u0026#34;, name: \u0026#34;categories\u0026#34;, widget: \u0026#34;list\u0026#34;, default: [\u0026#34;未分類\u0026#34;] }\r- { label: \u0026#34;タグ\u0026#34;, name: \u0026#34;tags\u0026#34;, widget: \u0026#34;list\u0026#34; , field: { name: \u0026#34;tag\u0026#34;, widget: \u0026#34;string\u0026#34; } }\r- { label: \u0026#34;表示順（weight）\u0026#34;, name: \u0026#34;weight\u0026#34;, widget: \u0026#34;number\u0026#34;, required: false, default: 20 } ここに以下のような項目を追加。 fieldsはお好みで追加してください。\n- name: \u0026#34;featured\u0026#34;\rlabel: \u0026#34;ラベル名\u0026#34;\rfolder: \u0026#34;content/featured\u0026#34;\rcreate: true\rslug: \u0026#34;{{slug}}\u0026#34;\rfields:\r- { label: \u0026#34;タイトル\u0026#34;, name: \u0026#34;title\u0026#34;, widget: \u0026#34;string\u0026#34; }\r- { label: \u0026#34;日付\u0026#34;, name: \u0026#34;date\u0026#34;, widget: \u0026#34;datetime\u0026#34; }\r- { label: \u0026#34;本文\u0026#34;, name: \u0026#34;body\u0026#34;, widget: \u0026#34;markdown\u0026#34; }\r- { label: \u0026#34;表示順（weight）\u0026#34;, name: \u0026#34;weight\u0026#34;, widget: \u0026#34;number\u0026#34;, required: false }\r- { label: \u0026#34;タグ\u0026#34;, name: \u0026#34;tags\u0026#34;, widget: \u0026#34;list\u0026#34;, field: { name: \u0026#34;tag\u0026#34;, widget: \u0026#34;string\u0026#34; }, required: false } この設定を config.yml の collections セクションに追加すると、CMSのサイドバーに「注目プロジェクト」が出てくるようになります。\n","summary":"Decap CMSでcontent/posts 以外のディレクトリ記事を編集する方法の紹介","title":"[Decap CMS] content/posts 以外のディレクトリの記事を編集","url":"/posts/decap-directory-edit/"},{"content":"\rNetlify CMSのカスタム中、ログインしようとするとエラーメッセージ。\nError loading the CMS configuration\rConfig Errors:\r'collections[0].fields' fields names must be unique\rCheck your config.yml file. 原因 ブログに「タグ + カテゴリ」を追加しようとした際に起こったエラーのようで\n/static/admin/config.yml\nに、\ncollections:\r- name: \u0026#34;posts\u0026#34;\rlabel: \u0026#34;記事\u0026#34;\rfolder: \u0026#34;content/posts\u0026#34;\rcreate: true\rslug: \u0026#34;{{slug}}\u0026#34;\rfields:\r- { label: \u0026#34;タイトル\u0026#34;, name: \u0026#34;title\u0026#34;, widget: \u0026#34;string\u0026#34; }\r- { label: \u0026#34;日付\u0026#34;, name: \u0026#34;date\u0026#34;, widget: \u0026#34;datetime\u0026#34; }\r- { label: \u0026#34;下書き\u0026#34;, name: \u0026#34;draft\u0026#34;, widget: \u0026#34;boolean\u0026#34;, default: false }\r- { label: \u0026#34;著者\u0026#34;, name: \u0026#34;author\u0026#34;, widget: \u0026#34;string\u0026#34;, default: \u0026#34;lain\u0026#34; }\r- { label: \u0026#34;アイキャッチ画像\u0026#34;, name: \u0026#34;image\u0026#34;, widget: \u0026#34;image\u0026#34;, required: false }\r- { label: \u0026#34;概要（抜粋）\u0026#34;, name: \u0026#34;summary\u0026#34;, widget: \u0026#34;string\u0026#34;, required: false, default: \u0026#34;（抜粋がありません）\u0026#34; }\r- { label: \u0026#34;カテゴリ\u0026#34;, name: \u0026#34;categories\u0026#34;, widget: \u0026#34;list\u0026#34;, required: false, default: [\u0026#34;その他\u0026#34;] }\r- { label: \u0026#34;タグ\u0026#34;, name: \u0026#34;tags\u0026#34;, widget: \u0026#34;list\u0026#34;, required: false }\r- { label: \u0026#34;本文\u0026#34;, name: \u0026#34;body\u0026#34;, widget: \u0026#34;markdown\u0026#34; }\r- label: \u0026#34;カテゴリ\u0026#34;\rname: \u0026#34;categories\u0026#34;\rwidget: \u0026#34;list\u0026#34;\rrequired: false\r- label: \u0026#34;タグ\u0026#34;\rname: \u0026#34;tags\u0026#34;\rwidget: \u0026#34;list\u0026#34;\rrequired: false を追加したのですが、\n「カテゴリ」と「タグ」を２つの追加してしまったのが原因のようです。\n✨ どちらを残すべき？ 今後管理のしやすさやコメントの追加を考えるなら、インデント記法（長い書き方）の方が、構造の可視性と拡張性に優れています。\n✅ 1. コメントを追加しやすい label: \u0026ldquo;タグ\u0026rdquo; name: \u0026ldquo;tags\u0026rdquo; widget: \u0026ldquo;list\u0026rdquo; required: false ポイント： 短縮記法ではコメントが付けづらい・読みづらくなります。\n✅ 2. 後でフィールドを増やしたいとき柔軟 label: \u0026ldquo;画像\u0026rdquo; name: \u0026ldquo;image\u0026rdquo; widget: \u0026ldquo;image\u0026rdquo; required: false media_folder: \u0026ldquo;static/uploads\u0026rdquo; public_folder: \u0026ldquo;/uploads\u0026rdquo; ポイント： 設定項目が増えてもインデント記法なら綺麗に保てます。\n✅ 3. 誤りに気付きやすい 構造が1行に詰まっていないので、nameの重複や設定ミスを目視で発見しやすいです。\n✅ 逆に短縮記法が向いてるのは？ ・単純で繰り返しの多いフィールドだけ（例：タイトルや日付） ・読みやすさより行数の短さを優先したいとき\n💡 実運用のおすすめスタイル ・title, date, draft → 短縮記法でもOK（シンプルなので） ・categories, tags, image, body, カスタム項目 → インデント記法で拡張性重視\n🎯 まとめ インデント記法 特徴：　読みやすい・コメント追加OK 場面：　中〜大規模CMS設定、保守が必要な場合\n短縮記法 特徴：　行数少なめ・軽い設定に便利 場面：　小規模プロジェクトや一時的な用途\n以上を踏まえ、以下に変更。\ncollections:\r- name: \u0026#34;posts\u0026#34;\rlabel: \u0026#34;記事\u0026#34;\rfolder: \u0026#34;content/posts\u0026#34;\rcreate: true\rslug: \u0026#34;{{slug}}\u0026#34;\rfields:\r- label: \u0026#34;タイトル\u0026#34;\rname: \u0026#34;title\u0026#34;\rwidget: \u0026#34;string\u0026#34;\r- label: \u0026#34;日付\u0026#34;\rname: \u0026#34;date\u0026#34;\rwidget: \u0026#34;datetime\u0026#34;\r- label: \u0026#34;下書き\u0026#34;\rname: \u0026#34;draft\u0026#34;\rwidget: \u0026#34;boolean\u0026#34;\rdefault: false\r- label: \u0026#34;著者\u0026#34;\rname: \u0026#34;author\u0026#34;\rwidget: \u0026#34;string\u0026#34;\rdefault: \u0026#34;lain\u0026#34;\r- label: \u0026#34;アイキャッチ画像\u0026#34;\rname: \u0026#34;image\u0026#34;\rwidget: \u0026#34;image\u0026#34;\rrequired: false\r- label: \u0026#34;概要（抜粋）\u0026#34;\rname: \u0026#34;summary\u0026#34;\rwidget: \u0026#34;string\u0026#34;\rrequired: false\rdefault: \u0026#34;（抜粋がありません）\u0026#34;\r- label: \u0026#34;カテゴリ\u0026#34;\rname: \u0026#34;categories\u0026#34;\rwidget: \u0026#34;list\u0026#34;\rrequired: false\rdefault: [\u0026#34;その他\u0026#34;]\r- label: \u0026#34;タグ\u0026#34;\rname: \u0026#34;tags\u0026#34;\rwidget: \u0026#34;list\u0026#34;\rrequired: false\r- label: \u0026#34;本文\u0026#34;\rname: \u0026#34;body\u0026#34;\rwidget: \u0026#34;markdown\u0026#34; git push して、netlify でデプロイし無事解決しました。\n","summary":"[Decap CMS] Config Errors: \u0026lsquo;collections[0].fields\u0026rsquo; fields names must be unique","title":"[Decap CMS] Config Errors: 'collections[0].fields' fields names must be unique","url":"/posts/decap-cms-config-errors-collections-0-fields-fields-names-must-be-unique/"},{"content":"こんにちは、lainです。\nAI、画像生成、動画、コマンドラインが大好きです。\nこのブログでは学習したこと、役に立ったTipsを発信しています。\n","summary":"\u003cp\u003eこんにちは、lainです。\u003cbr\u003e\nAI、画像生成、動画、コマンドラインが大好きです。\u003c/p\u003e\n\u003cp\u003eこのブログでは学習したこと、役に立ったTipsを発信しています。\u003c/p\u003e","title":"自己紹介","url":"/about/"},{"content":"\rはじめに netlify + Decap CMSで記事を作成する際、日付を[NOW]ボタンで選択すると、現在時刻が表示されますが、世界標準時と日本の時差が９時間ある為、このままの日時では、９時間経過しないと記事が表示されません。\nDecap CMS にはタイムゾーン指定の機能がないため、手動で９時間引いた時刻を設定するなどしていました。\n未来記事を表示できるようにする 設定ファイルの「config.toml」にオプション設定を追加する事で、未来記事を表示できるようになります。\n\\my-blog\\config.toml\n設定に以下を追加\nbuildFuture = true\nこれで未来記事を表示できるようになります。\n","summary":"Hugoで未来記事を表示させる方法の紹介（config.toml）","title":"Hugoで未来記事を表示させるには？ ","url":"/posts/hugo%E3%81%A7%E6%9C%AA%E6%9D%A5%E8%A8%98%E4%BA%8B%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%95%E3%81%9B%E3%82%8B%E3%81%AB%E3%81%AF/"},{"content":"\nHugoで現在使用されているテンプレートリストを確認する方法の紹介。\nまず、コマンドプロンプトを起動し、hugoを導入したディレクトリへ移動します。\nその後、以下のコマンドを実行。\nhugo --templateMetrics\n以下のように「template」の項目に一覧が表示され確認する事が出来ます。\n","summary":"使用中のテンプレートリスト確認方法","title":"Hugoで使われているテンプレートを確認する方法","url":"/posts/hugo%E3%81%A7%E4%BD%BF%E3%82%8F%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8B%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/"},{"content":"Draft　テスト投稿\n","summary":"\u003cp\u003eDraft　テスト投稿\u003c/p\u003e","title":"CMS からテスト投稿２","url":"/posts/cms-%E3%81%8B%E3%82%89%E3%83%86%E3%82%B9%E3%83%88%E6%8A%95%E7%A8%BF%EF%BC%92/"},{"content":"日本語入力テスト。\n問題なく入力できるようです。\nマークダウン入力テスト 太字もOK？\n画像アップロードテスト：Stable Diffusion version: v1.10.1\nコード入力：HTML\n\u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt;\r\u0026lt;title\u0026gt;Netlify CMS\u0026lt;/title\u0026gt;\r\u0026lt;script src=\u0026#34;https://identity.netlify.com/v1/netlify-identity-widget.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\r\u0026lt;script\u0026gt;\rwindow.CMS_MANUAL_INIT = true;\r\u0026lt;/script\u0026gt;\r\u0026lt;script src=\u0026#34;https://unpkg.com/decap-cms@^3.0.0/dist/decap-cms.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;script\u0026gt;\rif (window.netlifyIdentity) {\rwindow.netlifyIdentity.on(\u0026#34;init\u0026#34;, (user) =\u0026gt; {\rif (!user) {\rwindow.netlifyIdentity.on(\u0026#34;login\u0026#34;, () =\u0026gt; {\rdocument.location.href = \u0026#34;/admin/\u0026#34;;\r});\r}\r});\rwindow.netlifyIdentity.init();\r}\rwindow.CMS.init();\r\u0026lt;/script\u0026gt;\r\u0026lt;div id=\u0026#34;nc-root\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt; ","summary":"\u003cp\u003e日本語入力テスト。\u003c/p\u003e\n\u003cp\u003e問題なく入力できるようです。\u003c/p\u003e","title":"Decap CMS導入テスト投稿","url":"/posts/decap-cms%E5%B0%8E%E5%85%A5%E3%83%86%E3%82%B9%E3%83%88%E6%8A%95%E7%A8%BF/"},{"content":"（本文はまだありません）\n","summary":"\u003cp\u003e（本文はまだありません）\u003c/p\u003e","title":"ダミー記事12","url":"/posts/first/"},{"content":"こんにちは、これは私の最初のHugo記事です！\n","summary":"\u003cp\u003eこんにちは、これは私の最初のHugo記事です！\u003c/p\u003e","title":"はじめての投稿","url":"/posts/first-post/"},{"content":"テスト\n","summary":"\u003cp\u003eテスト\u003c/p\u003e","title":"Second","url":"/posts/second/"},{"content":"（本文はまだありません）\n","summary":"\u003cp\u003e（本文はまだありません）\u003c/p\u003e","title":"３つ目の投稿","url":"/posts/third/"}]